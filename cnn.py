from keras.callbacks import TensorBoard, EarlyStopping
from keras.layers import Activation, Flatten, Dense, Dropout, Conv2D, MaxPooling2D
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import classification_report,confusion_matrix
import numpy as np

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(64, 64, 1), data_format="channels_last"))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(72, (3, 3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.3))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

batch_size = 32
train_datagen = ImageDataGenerator(rescale = 1. / 255)
test_datagen = ImageDataGenerator(rescale = 1. / 255)

train_generator = train_datagen.flow_from_directory(
    '/home/prajwal/Desktop/Malwares/train',
    target_size=(64, 64),
    batch_size=batch_size,
    color_mode="grayscale",
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    '/home/prajwal/Desktop/Malwares/test',
    target_size=(64, 64),
    batch_size=batch_size,
    color_mode="grayscale",
    class_mode='binary',
    shuffle=False)

tb = TensorBoard()
es = EarlyStopping(min_delta=0.01, patience=2)

model.fit_generator(train_generator,
                    steps_per_epoch=4747 // batch_size,
                    epochs=20,
                    validation_data=validation_generator,
                    callbacks=[tb],
                    validation_steps=600 // batch_size)

model.save_weights('first_try.h5')

# print(model.summary())

# Y_pred = model.predict_generator(validation_generator, 600 // batch_size+1)
# y_pred = np.argmax(Y_pred, axis=1)
# print('Confusion Matrix')
# print(confusion_matrix(validation_generator.classes, y_pred))


# dense layer with 128 neurons give same results but with half the parameters.
# removing the second conv layer gives same results but doubles the number of params.
# Adding 3rd conv layer with 72 filters and changing 2nd to 32 filters gives ~ 94% acc
