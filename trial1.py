from keras.layers import Activation, Flatten, Dense, Dropout, Conv2D, MaxPooling2D, BatchNormalization
from keras.models import Sequential
from keras.callbacks import TensorBoard,EarlyStopping
from keras.preprocessing.image import ImageDataGenerator

model = Sequential()
model.add(Conv2D(16, (3, 3), input_shape=(256, 256, 3), data_format="channels_last"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.2))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

batch_size = 16
train_datagen = ImageDataGenerator(rescale=1. / 255)
test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    '/home/prajwal/Desktop/Malwares/train',
    target_size=(256, 256),
    batch_size=batch_size,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    '/home/prajwal/Desktop/Malwares/test',
    target_size=(256, 256),
    batch_size=batch_size,
    class_mode='binary')

tb = TensorBoard()
es = EarlyStopping()
model.fit_generator(
        train_generator,
        steps_per_epoch=2000 // batch_size,
        epochs=50,
        validation_data=validation_generator,
        callbacks=[tb],
        validation_steps=800 // batch_size)
model.save_weights('first_try.h5')